// <auto-generated />
using System;
using CleanArchitecture.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AdvisoryContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfessorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResearchLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThesisTopic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("ResearchLineId");

                    b.HasIndex("StudentId");

                    b.ToTable("AdvisoryContracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a4033"),
                            DateCreated = new DateTime(2024, 7, 20, 12, 55, 6, 746, DateTimeKind.Local).AddTicks(7673),
                            Deleted = false,
                            Message = "Me dirijo a usted con el propósito de solicitar sasesoría para mi tesis de grado",
                            ProfessorId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a4011"),
                            ProfessorMessage = "i",
                            ResearchLineId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a4010"),
                            Status = 1,
                            StudentId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a1"),
                            ThesisTopic = "Wifi 802.22, de alrgo alcance en zonas rurales"
                        },
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a4034"),
                            DateCreated = new DateTime(2024, 7, 20, 12, 55, 6, 746, DateTimeKind.Local).AddTicks(7687),
                            Deleted = false,
                            Message = "Me dirijo a usted con el propósito de solicitar sasesoría para mi tesis de grado",
                            ProfessorId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a4011"),
                            ProfessorMessage = "i",
                            ResearchLineId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a4010"),
                            Status = 0,
                            StudentId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40ad"),
                            ThesisTopic = "Sensores Iot y sus aplicaciones en la agricultura"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("GoogleEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfessorProgress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentProgress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Professor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCoordinator")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResearchGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResearchGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Professors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40b1"),
                            Deleted = false,
                            IsCoordinator = false,
                            ResearchGroupId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a5"),
                            UserId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a1")
                        },
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a4011"),
                            Deleted = false,
                            IsCoordinator = false,
                            ResearchGroupId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a7"),
                            UserId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a2")
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ResearchGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("ResearchGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a5"),
                            Code = "SW123",
                            Deleted = false,
                            Name = "INGENIERIA DE SOFTWARE"
                        },
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a7"),
                            Code = "RESEGTI",
                            Deleted = false,
                            Name = "RESEGTI"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ResearchLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("ResearchGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResearchGroupId");

                    b.ToTable("ResearchLines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a8"),
                            Code = "ASW123",
                            Deleted = false,
                            Name = "Arquitectura de Software",
                            ResearchGroupId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a5")
                        },
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a4010"),
                            Code = "IoT",
                            Deleted = false,
                            Name = "Internet de las Cosas",
                            ResearchGroupId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a7")
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40ad"),
                            Code = "0020210008",
                            Deleted = false,
                            UserId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a3")
                        },
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a1"),
                            Code = "0020210008",
                            Deleted = false,
                            UserId = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a4")
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b542bf25-134c-47a2-a0df-84ed14d03c4a"),
                            Deleted = false,
                            Name = "Admin Tenant"
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastLoggedinDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40ae"),
                            Deleted = false,
                            Email = "admin@email.com",
                            FirstName = "Admin",
                            LastName = "User",
                            Password = "$2a$12$Blal/uiFIJdYsCLTMUik/egLbfg3XhbnxBC6Sb5IKz2ZYhiU/MzL2",
                            Role = 0,
                            Status = 0,
                            TenantId = new Guid("b542bf25-134c-47a2-a0df-84ed14d03c4a")
                        },
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a1"),
                            Deleted = false,
                            Email = "ronald.ibarra@unas.edu.pe",
                            FirstName = "Ronald",
                            LastName = "Ibarra Zapata",
                            Password = "$2a$12$Blal/uiFIJdYsCLTMUik/egLbfg3XhbnxBC6Sb5IKz2ZYhiU/MzL2",
                            Role = 1,
                            Status = 0,
                            TenantId = new Guid("b542bf25-134c-47a2-a0df-84ed14d03c4a")
                        },
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a2"),
                            Deleted = false,
                            Email = "gardin.olivera@unas.edu.pe",
                            FirstName = "Gardin",
                            LastName = "Olivera Ruiz",
                            Password = "$2a$12$Blal/uiFIJdYsCLTMUik/egLbfg3XhbnxBC6Sb5IKz2ZYhiU/MzL2",
                            Role = 1,
                            Status = 0,
                            TenantId = new Guid("b542bf25-134c-47a2-a0df-84ed14d03c4a")
                        },
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a3"),
                            Deleted = false,
                            Email = "giovanni.perez@unas.edu.pe",
                            FirstName = "Giovanni",
                            LastName = "Perez Espinoza",
                            Password = "$2a$12$Blal/uiFIJdYsCLTMUik/egLbfg3XhbnxBC6Sb5IKz2ZYhiU/MzL2",
                            Role = 1,
                            Status = 0,
                            TenantId = new Guid("b542bf25-134c-47a2-a0df-84ed14d03c4a")
                        },
                        new
                        {
                            Id = new Guid("7e3892c0-9374-49fa-a3fd-53db637a40a4"),
                            Deleted = false,
                            Email = "luz.cabia@unas.edu.pe",
                            FirstName = "Luz Lisbeth",
                            LastName = "Cabia Adriano",
                            Password = "$2a$12$Blal/uiFIJdYsCLTMUik/egLbfg3XhbnxBC6Sb5IKz2ZYhiU/MzL2",
                            Role = 1,
                            Status = 0,
                            TenantId = new Guid("b542bf25-134c-47a2-a0df-84ed14d03c4a")
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AdvisoryContract", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.ResearchLine", "ResearchLine")
                        .WithMany()
                        .HasForeignKey("ResearchLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("ResearchLine");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Professor", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.ResearchGroup", "ResearchGroup")
                        .WithMany("Professors")
                        .HasForeignKey("ResearchGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ResearchGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ResearchLine", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.ResearchGroup", "ResearchGroup")
                        .WithMany("ResearchLines")
                        .HasForeignKey("ResearchGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ResearchGroup");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Student", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.User", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ResearchGroup", b =>
                {
                    b.Navigation("Professors");

                    b.Navigation("ResearchLines");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.User", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
